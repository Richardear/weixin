package com.tencent.weixin.util;import org.slf4j.Logger;import org.slf4j.LoggerFactory;/** *  * 此类描述的是：辅助输出 *  */public class OutUtil {    private OutUtil(){}    @Deprecated    public static void out(String... strs) {        for (String str : strs) {            System.out.println(str);        }    }    @Deprecated    public static void out(Object... objs) {        for (Object obj : objs) {            System.out.println(obj);        }    }    //-----------------        public static void trace(String... strs) {            _trace(Thread.currentThread().getName(), strs);        }        public static void trace(Object... objs) {            _trace(Thread.currentThread().getName(), objs);        }        public static void trace(Class<?> clz, String... strs) {            _trace(clz.getName(), strs);        }        public static void trace(Class<?> clz, Object... objs) {            _trace(clz.getName(), objs);        }    //-----------------    public static void log(String... strs) {        _log(Thread.currentThread().getName(), strs);    }    public static void log(Object... objs) {        _log(Thread.currentThread().getName(), objs);    }    public static void log(Class<?> clz, String... strs) {        _log(clz.getName(), strs);    }    public static void log(Class<?> clz, Object... objs) {        _log(clz.getName(), objs);    }    //-----------------    public static void error(String... strs) {        _error(Thread.currentThread().getName(), strs);    }    public static void error(Throwable thr, String... strs) {        _error(Thread.currentThread().getName(), thr, strs);    }    public static void error(Object... objs) {        _error(Thread.currentThread().getName(), objs);    }    public static void error(Throwable thr, Object... objs) {        _error(Thread.currentThread().getName(), thr, objs);    }    public static void error(Class<?> clz, String... strs) {        _error(clz.getName(), strs);    }    public static void error(Class<?> clz, Throwable thr, String... strs) {        _error(clz.getName(), thr, strs);    }    public static void error(Class<?> clz, Object... objs) {        _error(clz.getName(), objs);    }    public static void error(Class<?> clz, Throwable thr, Object... objs) {        _error(clz.getName(), thr, objs);    }    public static void error(Logger logger, Throwable thr, Object... strs) {        _error(logger, thr, strs);    }    //-----------------    public static void debug(String... strs) {        _debug(Thread.currentThread().getName(), strs);    }    public static void debug(Throwable thr, String... strs) {        _debug(Thread.currentThread().getName(), thr, strs);    }    public static void debug(Object... objs) {        _debug(Thread.currentThread().getName(), objs);    }    public static void debug(Throwable thr, Object... objs) {        _debug(Thread.currentThread().getName(), thr, objs);    }    public static void debug(Class<?> clz, String... strs) {        _debug(clz.getName(), strs);    }    public static void debug(Class<?> clz, Throwable thr, String... strs) {        _debug(clz.getName(), thr, strs);    }    public static void debug(Class<?> clz, Object... objs) {        _debug(clz.getName(), objs);    }    public static void debug(Class<?> clz, Throwable thr, Object... objs) {        _debug(clz.getName(), thr, objs);    }    public static void debug(Logger logger, String str) {        _debug(logger, str);    }    //-----------------    public static void info(String... strs) {        _info(Thread.currentThread().getName(), strs);    }    public static void info(Throwable thr, String... strs) {        _info(Thread.currentThread().getName(), thr, strs);    }    public static void info(Object... objs) {        _info(Thread.currentThread().getName(), objs);    }    public static void info(Throwable thr, Object... objs) {        _info(Thread.currentThread().getName(), thr, objs);    }    public static void info(Class<?> clz, String... strs) {        _info(clz.getName(), strs);    }    public static void info(Class<?> clz, Throwable thr, String... strs) {        _info(clz.getName(), thr, strs);    }    public static void info(Class<?> clz, Object... objs) {        _info(clz.getName(), objs);    }    public static void info(Class<?> clz, Throwable thr, Object... objs) {        _info(clz.getName(), thr, objs);    }    public static void info(Logger logger, String strs) {        _info(logger, strs);    }//--------------------    public static void warn(String... strs) {        _warn(Thread.currentThread().getName(), strs);    }    public static void warn(Throwable thr, String... strs) {        _warn(Thread.currentThread().getName(), thr, strs);    }    public static void warn(Object... objs) {        _warn(Thread.currentThread().getName(), objs);    }    public static void warn(Throwable thr, Object... objs) {        _warn(Thread.currentThread().getName(), thr, objs);    }    public static void warn(Class<?> clz, String... strs) {        _warn(clz.getName(), strs);    }    public static void warn(Class<?> clz, Throwable thr, String... strs) {        _warn(clz.getName(), thr, strs);    }    public static void warn(Class<?> clz, Object... objs) {        _warn(clz.getName(), objs);    }    public static void warn(Class<?> clz, Throwable thr, Object... objs) {        _warn(clz.getName(), thr, objs);    }    public static void warn(Logger logger, String str) {        _warn(logger, str);    }    //---------------        private static void _trace(String clzName, String... strs) {            Logger logger = LoggerFactory.getLogger(clzName);            for (String str : strs) {                logger.trace(str);            }        }        private static void _trace(String clzName, Object... objs) {            Logger logger = LoggerFactory.getLogger(clzName);            for (Object obj : objs) {                logger.trace(String.valueOf(obj));            }        }    //---------------    private static void _log(String clzName, String... strs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (String str : strs) {            logger.info(str);        }    }    private static void _log(String clzName, Object... objs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (Object obj : objs) {            logger.info(String.valueOf(obj));        }    }    //-----------------    private static void _error(String clzName, String... strs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (String str : strs) {            logger.error(str);        }    }    private static void _error(String clzName, Throwable thr, String... strs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (String str : strs) {            logger.error(str, thr);        }    }    private static void _error(String clzName, Object... objs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (Object obj : objs) {            logger.error(String.valueOf(obj));        }    }    private static void _error(String clzName, Throwable thr, Object... objs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (Object obj : objs) {            logger.error(String.valueOf(obj), thr);        }    }    private static void _error(Logger logger, Throwable thr, Object... objs) {        for (Object obj : objs) {            logger.error(String.valueOf(obj), thr);        }    }    //---------------    private static void _debug(String clzName, String... strs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (String str : strs) {            logger.debug(str);        }    }    private static void _debug(String clzName, Throwable thr, String... strs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (String str : strs) {            logger.debug(str, thr);        }    }    private static void _debug(String clzName, Object... objs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (Object obj : objs) {            logger.debug(String.valueOf(obj));        }    }    private static void _debug(String clzName, Throwable thr, Object... objs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (Object obj : objs) {            logger.debug(String.valueOf(obj), thr);        }    }    private static void _debug(Logger logger, String str) {        logger.debug(str);    }    //---------------    private static void _info(String clzName, String... strs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (String str : strs) {            logger.info(str);        }    }    private static void _info(String clzName, Throwable thr, String... strs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (String str : strs) {            logger.info(str, thr);        }    }    private static void _info(String clzName, Object... objs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (Object obj : objs) {            logger.info(String.valueOf(obj));        }    }    private static void _info(String clzName, Throwable thr, Object... objs) {        Logger logger = LoggerFactory.getLogger(clzName);        for (Object obj : objs) {            logger.info(String.valueOf(obj), thr);        }    }    private static void _info(Logger logger, String str) {        logger.info(str);    }    //----------------        private static void _warn(String clzName, String... strs) {            Logger logger = LoggerFactory.getLogger(clzName);            for (String str : strs) {                logger.warn(str);            }        }        private static void _warn(String clzName, Throwable thr, String... strs) {            Logger logger = LoggerFactory.getLogger(clzName);            for (String str : strs) {                logger.warn(str, thr);            }        }        private static void _warn(String clzName, Object... objs) {            Logger logger = LoggerFactory.getLogger(clzName);            for (Object obj : objs) {                logger.warn(String.valueOf(obj));            }        }        private static void _warn(String clzName, Throwable thr, Object... objs) {            Logger logger = LoggerFactory.getLogger(clzName);            for (Object obj : objs) {                logger.warn(String.valueOf(obj), thr);            }        }        private static void _warn(Logger logger, String str) {            logger.warn(str);        }//------------------    public static boolean isTraceEnabled() {        return getLogger().isTraceEnabled();    }    public static boolean isTraceEnabled(Class<?> clz) {        return getLogger(clz).isTraceEnabled();    }    public static boolean isInfoEnabled() {        return getLogger().isInfoEnabled();    }    public static boolean isInfoEnabled(Class<?> clz) {        return getLogger(clz).isInfoEnabled();    }    public static boolean isErrorEnabled() {        return getLogger().isErrorEnabled();    }    public static boolean isErrorEnabled(Class<?> clz) {        return getLogger(clz).isErrorEnabled();    }    public static boolean isDebugEnabled() {        return getLogger().isDebugEnabled();    }    public static boolean isDebugEnabled(Class<?> clz) {        return getLogger(clz).isDebugEnabled();    }    public static boolean isWarnEnabled() {        return getLogger().isWarnEnabled();    }    public static boolean isWarnEnabled(Class<?> clz) {        return getLogger(clz).isWarnEnabled();    }    //-------------------    public static Logger getLogger(){        Logger logger = LoggerFactory.getLogger(Thread.currentThread().getName());        return logger;    }    public static Logger getLogger(String clzName){        Logger logger = LoggerFactory.getLogger(clzName);        return logger;    }    public static Logger getLogger(Class<?> clz){        Logger logger = LoggerFactory.getLogger(clz);        return logger;    }}