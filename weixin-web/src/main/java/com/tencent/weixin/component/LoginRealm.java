package com.tencent.weixin.component;import com.tencent.weixin.constant.BasicConstants;import com.tencent.weixin.service.ISysUserService;import org.apache.commons.codec.digest.DigestUtils;import org.apache.commons.lang3.StringUtils;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.*;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.jdbc.JdbcRealm;import org.apache.shiro.session.Session;import org.apache.shiro.subject.PrincipalCollection;import org.apache.shiro.subject.Subject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.util.Map;/** * * @ClassName: LoginRealm* @Description: 登录授权拦截器 */@Componentpublic class LoginRealm extends JdbcRealm {    @Autowired    private ISysUserService sysUserService;        /**     *  登录认证     *      */    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;        String uname = String.valueOf(usernamePasswordToken.getUsername());        String upass = String.valueOf(usernamePasswordToken.getPassword());        Map<String,Object> userMap = null;        try{            userMap = sysUserService.findByUname(uname);        }catch(Throwable th){            throw new AuthenticationException("mybatis加载错误，请检查mybatis是否正常启动！cause:"+th.getMessage(), th);        }        AuthenticationInfo authenticationInfo = null;        if (userMap != null) {            // 得到主键Id            String kid = (String) userMap.get("cuserid");            // 得到数据库中加密的密码            String password = (String) userMap.get("user_password");            // 通过登录的密码得到加密后的密码            String codecPWD = DigestUtils.md5Hex(kid + upass);            String newPWD = BasicConstants.encryptionStr + codecPWD;            if (password.equals(newPWD)) {                authenticationInfo = new SimpleAuthenticationInfo(uname, upass, getName());                this.setSession("userMap",userMap);                return authenticationInfo;            }            throw new AuthenticationException("用户"+uname+"密码错误");        }        throw new UnknownAccountException("用户"+uname+"不存在");    }        /**      * 将一些数据放到ShiroSession中,以便于其它地方使用      * @see  比如Controller,使用时直接用HttpSession.getAttribute(key)就可以取到      */      private void setSession(Object key, Object value){        Subject currentUser = SecurityUtils.getSubject();          if(null != currentUser){              Session session = currentUser.getSession();  //            System.out.println(session.getHost()+"默认超时时间为[" + session.getTimeout() + "]毫秒");              if(null != session){                  session.setAttribute(key, value);              }          }      }    /**     *  授权     *      */    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {         String username = (String) principals.getPrimaryPrincipal();         if (!StringUtils.isNotBlank(username)) {             SimpleAuthorizationInfo authenticationInfo = new SimpleAuthorizationInfo();             return authenticationInfo;         }         return null;    }}